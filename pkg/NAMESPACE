
## Package has dynamic library
useDynLib(RProtoBuf)

## And some functions
export(listPeopleAsDataFrame, listPeopleAsList)
       
importFrom( methods, new )
importFrom( utils, str )

exportClasses(

	# descriptors
	"protobufDescriptor",  
	"protobufFieldDescriptor", "protobufEnumDescriptor", 
	"protobufServiceDescriptor", "protobufMethodDescriptor", 
	"protobufFileDescriptor", 
	
	# message
	"protobufMessage"
	
	) 
	
	
exportMethods( "new", "[[", "[[<-", "$", "$<-", "show",
	"serialize", "as.character", "update", 
	"has", "clone", "merge", "read", "bytesize",
	"length", "str", "isInitialized", 
	"clear", "size", "size<-", "swap", 
	"descriptor", "set", "fetch", "toString", 
	"identical", "==", "!=", "all.equal", "add", 
	"fileDescriptor", "name",
	
	# rpc
	"invokeLocally"
	)

export( "P", "throw", "readProtoFiles" )

if( exists( ".DollarNames", asNamespace("utils") ) ) importFrom( utils, .DollarNames )
S3method(.DollarNames, protobufMessage )
S3method(.DollarNames, protobufDescriptor )
S3method(.DollarNames, protobufEnumDescriptor )
S3method(.DollarNames, protobufFileDescriptor )
S3method(.DollarNames, protobufFieldDescriptor )
S3method(.DollarNames, protobufServiceDescriptor )
S3method(.DollarNames, protobufMethodDescriptor )


S3method( with, protobufMessage )
S3method( within, protobufMessage)

S3method( as.list, protobufMessage )
S3method( as.list, protobufDescriptor )
S3method( as.list, protobufEnumDescriptor )
S3method( as.list, protobufFileDescriptor )
S3method( as.list, protobufServiceDescriptor )

importFrom( "stats", "update")
importFrom( "utils", "packageDescription" )

