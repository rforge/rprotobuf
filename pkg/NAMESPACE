
## Package has dynamic library
useDynLib(RProtoBuf)

## And some functions
export(listPeopleAsDataFrame, listPeopleAsList, addPerson)

importFrom( methods, new )
importFrom( utils, str )
importFrom( "stats", "update")
importFrom( "utils", "packageDescription" )

exportClasses(

	# descriptors
	"protobufDescriptor",
	"protobufFieldDescriptor", "protobufEnumDescriptor",
	"protobufServiceDescriptor", "protobufMethodDescriptor",
	"protobufFileDescriptor", "protobufEnumValueDescriptor", 

	# message
	"protobufMessage"

	)


exportMethods( "new", "[[", "[[<-", "$", "$<-", "show",
	"serialize", "as.character", "update",
	"has", "clone", "merge", "read", "bytesize",
	"length", "str", "isInitialized",
	"clear", "size", "size<-", "swap",
	"descriptor", "set", "fetch", "toString",
	"identical", "==", "!=", "all.equal", "add",
	"fileDescriptor", "name", 
	
	"containing_type", 
	"field_count", "nested_type_count", "enum_type_count", 
	"field", "nested_type", "enum_type", 

	# FieldDescriptor
	"is_extension", "number", "label", 
	"is_required", "is_repeated", "is_optional", 
	"has_default_value", "default_value", 
	"message_type", "enum_type", 
	
	# EnumDescriptor
	"value_count", "value", 
	
	# ServiceDescriptor
	"method_count", 
	
	# rpc
	"invokeLocally"
	)

export( "P", "readProtoFiles", "asMessage" )

if( exists( ".DollarNames", asNamespace("utils") ) ) importFrom( utils, .DollarNames )
S3method(.DollarNames, protobufMessage )
S3method(.DollarNames, protobufDescriptor )
S3method(.DollarNames, protobufEnumDescriptor )
S3method(.DollarNames, protobufFileDescriptor )
S3method(.DollarNames, protobufFieldDescriptor )
S3method(.DollarNames, protobufServiceDescriptor )
S3method(.DollarNames, protobufMethodDescriptor )

S3method( with, protobufMessage )
S3method( within, protobufMessage)

S3method( as.list, protobufMessage )
S3method( as.list, protobufDescriptor )
S3method( as.list, protobufEnumDescriptor )
S3method( as.list, protobufFileDescriptor )
S3method( as.list, protobufServiceDescriptor )

# constants
exportPattern( "^TYPE_" )
exportPattern( "^CPPTYPE_" )
exportPattern( "^LABEL_" )

