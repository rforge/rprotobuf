Notes on Coding Style (C++ only for now).

1. Conventions: spacing, column limit, etc.
2. clang-format
3. excluded files
4. Emacs considerations (file-local config, dir-level config, and FoldingMode annotations.)


1. Conventions: spacing, column limit, etc.
-------------------------------------------------------------------------------

In December 2013 a pass was made through the code base with
clang-format to enforce consistency among several competing styles
that were used in the code base.  The new style requires:

1) 4-space indents
2) 100-character column limit
3) no indentation for top level objects inside 'namespace {'
4) no space inside opening/closing parenthesis of argument lists '(arg1, arg2)'
5) space before open brackets.
6) open brackets on same line as if conditional or switch statement.
7) Unused arguments in functions should be named with 'unused_' prefix.

These conventions can be changed, so long as the code base remains consistent.

2. clang-format
-------------------------------------------------------------------------------

These conventions can automatically be applied to files with:

 clang-format -style="{BasedOnStyle: google, IndentWidth: 4, ColumnLimit: 100}" -i *.cpp

There are a number of other parameters that can be set however, see the full output of

 clang-format -dump-config

One changes have been made locally, you can view the diff with whitespace omitted with :

 svn diff -x -w

This will still pull up all the changes where lines were broken at 100
characters or braces changed lines, but will ignore most of the pure
whitespace changes for reviewing purposes before submitting.

3. excluded files
-------------------------------------------------------------------------------

We exclude sisocks.h from style issues as it is written separately by
Simon Urbanek.

We exclude Rcppsupport.h and RcppMacros.h because I don't like the
result.  I want BEGIN_RCPP on its own line, for example.

4. Emacs considerations
-------------------------------------------------------------------------------

A directory level configuration file is present in pkg/src to enforce
common standard for files in that directory.  Modern emacs should read
this file and apply its settings for new or existing file buffers in
that directory.

The file level prop line at the top of a file can be generated from
the directory level config with 
M-x copy-dir-locals-to-file-locals-prop-line

The relevant prop line was added to all of the .cpp files in this
directory by running awk in a loop:

awk -v s="// -*- indent-tabs-mode: nil; tab-width: 4; show-trailing-whitespace: t; c-indent-level: 4; c-basic-offset: 4; -*-" 'NR == 1 {print s} {print}' $x > $x.new

In addition to the buffer C++ mode settings, some of the files include
'{{{' '}}}' annotations in comments that are used to fold/unfold
sections of code with Emacs folding mode (M-x folding-mode).  You can
then right click to expand/hide these sections to get a higher level
view of the file or drill down into specific sections of the code.

These folding annotations are also used by other editors and are not
specific to Emacs.